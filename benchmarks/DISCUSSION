          'syllabizeLearning' => {
                          'accuracy_percentage' => '0.825265940706238',
                          'speediest_percentage' => '0.715050040913955',
                          'lone_accuracy_count' => 528,
                          'speediest' => 11360,
                          'accurate' => 13111
                        },
          'syllabizeLearningwithaccent' => {
                             'accuracy_percentage' => '0.780575313149116',
                             'lone_accuracy_count' => 422,
                             'speediest_percentage' => '0',
                             'speediest' => 0,
                             'accurate' => 12401
                           },
          'trouvain' => {
                          'accuracy_percentage' => '0.619940832126896',
                          'speediest_percentage' => '0.174419336564487',
                          'lone_accuracy_count' => 557,
                          'speediest' => 2771,
                          'accurate' => 9849
                        }
        };
so lets say I didn't want to get rid of it, how would it be even used? is there any way to make use of it?
because I can only use it when syllabizeLearning ends in an error, because syllabizeLearning is the more
accurate of the two, it should be tried first, right? yes and there's no special algorithm that I don't know about
that I should be using to make use of all three of these, right? yep ok so I'll get rid of it
and the way it will work is like this
first algo is syllabizeLearning
then if that fails, for a word like aosufefweawfads
something weird, it will use the scripted rules, but there also needs to be an interface where I can add my own corrections
sort of like an exceptions list, you know what I mean? yeah, can be done same way as Container class, wrap original algo, run by exceptions list
first, if not found - run nested algo. ok cool
